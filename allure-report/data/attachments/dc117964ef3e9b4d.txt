# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate filter buttons on Order Capture Page
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:109:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveScreenshot(expected)

Locator: locator('span[role=\'toolbar\']').filter({ has: getByLabel('Grid View') })
  Timeout 5000ms exceeded.

Call log:
  - expect.toHaveScreenshot(OrderCapture/ContentSlotSection\GridViewButtonOnContentSlotSection.png) with timeout 5000ms
    - generating new stable screenshot expectation
  - waiting for locator('span[role=\'toolbar\']').filter({ has: getByLabel('Grid View') })
  - Timeout 5000ms exceeded.

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:111:28
```

# Test source

```ts
   11 |   });
   12 |   const context = await browser.newContext({
   13 |     storageState: undefined
   14 |   });
   15 |     page = await context.newPage();
   16 |       
   17 |     await page.goto("https://vb04.wolseleyuk.com/ic/builder/rt/wol-order-capture/live/webApps/wol-order-capture/vp/");
   18 |     await page.getByRole('button').filter({hasText:'SSO'}).click();
   19 |     await page.getByPlaceholder('first.last@domain.com').fill('krishna.pemmaraju@wolseley.co.uk')
   20 |     await page.locator("input[value='Next']").click();
   21 |     await page.getByPlaceholder('Password').fill('Varahibaba16$');
   22 |     await page.locator("input[value='Sign in']").click();
   23 |     await page.locator("input[value='Yes']").waitFor({state:'visible',timeout:10000})
   24 |     await page.locator("input[value='Yes']").click();
   25 |     await page.getByRole('heading').filter({hasText: 'Order Capture'}).waitFor({state:'visible',timeout:10000})
   26 | })
   27 |
   28 | test("Order Capture - Full Page Screenshot", async () => {
   29 |     await expect(page).toHaveScreenshot(["OrderCapture", "OrderCaptureFullScreenshot.png"], { fullPage: true });
   30 | })
   31 |
   32 | test("Validate Order Capture Header Text", async () => {
   33 |     expect(await page.locator("#ojHeader_pageTitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageHeader.txt"]);
   34 |     expect(await page.locator("#ojHeader_pageSubtitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageSubHeader.txt"]);
   35 | })
   36 |
   37 | test("Validate Product search input is present", async () => {
   38 |     const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   39 |     await expect(getSearchBarElement).toHaveAttribute('aria-label', 'Product Search')
   40 | })
   41 |
   42 | test("Validate Submit button", async () => {
   43 |     const submitButton = page.getByRole("button", { name: 'Submit' });
   44 |     await expect(submitButton).toHaveScreenshot(["OrderCapture/SubmitButton", "SubmitBtnOnOrderCapturePage.png"])
   45 | })
   46 |
   47 | test("Validate Select Customer section info Slot", async () => {
   48 |     const customerTextAvailable = page.locator("span[title='Customer']");
   49 |     const selectCustomerText = page.locator("div[title='Select Customer...']");
   50 |     const clickToSelectCustomer = page.locator("span[title='Click to select a customer']");
   51 |     const customerContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer']");
   52 |     const searchInputAvailableAfterClickCustomer = page.locator("input[aria-label='Customer Search']")
   53 |
   54 |
   55 |     await expect(customerTextAvailable).toHaveText("Customer")
   56 |     await expect(selectCustomerText).toHaveText("Select Customer...")
   57 |     await expect(clickToSelectCustomer).toHaveText("Click to select a customer")
   58 |     await expect(customerContentSlotSelection).toBeEnabled();
   59 |     await customerContentSlotSelection.click();
   60 |     await expect(searchInputAvailableAfterClickCustomer).toBeVisible()
   61 |     await expect(searchInputAvailableAfterClickCustomer).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerSearchInputTextBox.png"])
   62 |     await expect(customerContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerContentSlotClickable.png"])
   63 | })
   64 |
   65 | // test("Validate Payment section info Slot", async ({ page }) => {
   66 | //     const clickOnPaymentBtn = page.locator("span[title='Payment Method']");
   67 | //     const paymentTextAvailable = page.locator("span[title='Payment Method']");
   68 | //     const paymentContentSlotSelection = page.locator("oj-vb-fragment[name='wol-oc-payment']");
   69 | //     const paymentAccountButton = page.getByRole('button', {name:'Account'});
   70 |
   71 | //     await clickOnPaymentBtn.click();
   72 | //     await expect(paymentTextAvailable).toHaveText("Payment Method")
   73 | //     await expect(paymentContentSlotSelection).toBeVisible();
   74 | //     await expect(paymentContentSlotSelection).toHaveScreenshot(["OrderCapture/PaymentContentSlot", "PaymentContentSlotClickable.png"])
   75 | //     await expect(paymentAccountButton).toBeVisible();
   76 | // })
   77 |
   78 | test("Validate Shipment method section layout", async()=> {
   79 |     const shipmentMethodSection = page.locator("oj-sp-scoreboard-metric-card[card-title='Shipping Method']")
   80 |     const shipmentContentAvaialble = page.locator("oj-vb-fragment[name='wol-oc-shipping']")
   81 |     const getTextOfShippingDelivery = page.locator("oj-vb-fragment[name='wol-oc-shipping']").filter({has: page.locator("oj-vb-fragment-slot[name='content']")}).
   82 |       filter({has:page.locator("div[class*='oj-flex']")}).filter({has:page.locator("span")});
   83 |   
   84 |     await expect(shipmentMethodSection).toBeVisible();
   85 |     await shipmentMethodSection.click();
   86 |     await expect(shipmentContentAvaialble).toBeVisible();
   87 |     expect(await getTextOfShippingDelivery.textContent()).toContain("Shipping and Delivery")
   88 |    
   89 | })
   90 |
   91 | test("Validate Customer PO section info Slot", async () => {
   92 |     const customerPOTextAvailable = page.locator("span[title='Customer PO #']");
   93 |     const customerPOContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']");
   94 |     const customerPOContentHeaderAfterClick = page.locator("oj-vb-fragment[name='wol-oc-order-details']").filter({has: page.locator("oj-vb-fragment-slot[name='content']")}).
   95 |     filter({has:page.locator("div[class*='oj-flex']")}).filter({has:page.locator("span")});
   96 |     const customerOrderInputTextAVailable = page.getByLabel("Customer Order Number")
   97 |     const requiredByDateInputAvailable = page.locator("div[class*='oj-inputdatetime-input-container']").filter({has: page.getByRole('combobox')})
   98 |
   99 |     await expect(customerPOTextAvailable).toHaveText("Customer PO #")
  100 |     await expect(customerPOContentSlotSelection).toBeEnabled();
  101 |     await expect(customerPOContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerPOContentSlot", "CustomerPOContentSlotClickable.png"])
  102 |     await customerPOContentSlotSelection.click();
  103 |     expect(await customerPOContentHeaderAfterClick.textContent()).toContain("Order Details")
  104 |     await expect(customerOrderInputTextAVailable).toBeVisible();
  105 |     await expect(requiredByDateInputAvailable).toBeVisible();
  106 | })
  107 |
  108 |
  109 | test("Validate filter buttons on Order Capture Page", async () => {
  110 |     const gridView = page.locator("span[role='toolbar']").filter({ has: page.getByLabel('Grid View') })
> 111 |     await expect(gridView).toHaveScreenshot(["OrderCapture/ContentSlotSection", "GridViewButtonOnContentSlotSection.png"])
      |                            ^ Error: Timed out 5000ms waiting for expect(locator).toHaveScreenshot(expected)
  112 | })
  113 |
  114 | // test.skip("Validate Cancel and Save buttons on Payment Slot Page", async ({ page }) => {
  115 | //     await page.locator("oj-sp-scoreboard-metric-card[card-title='Payment Method']").click({ timeout: 2000 })
  116 | //     const cancelBtnOnContentSlot = page.getByRole('button', { name: 'Cancel' })
  117 | //     const saveBtnOnContentSlot = page.getByRole('button', { name: 'Save' })
  118 | //     await expect(cancelBtnOnContentSlot).toHaveScreenshot(["OrderCapture/PaymentContentSlotSection", "CancelButtonOnPaymentContentSlotSection.png"])
  119 | //     await expect(saveBtnOnContentSlot).toHaveScreenshot(["OrderCapture/PaymentContentSlotSection", "SaveButtonOnPaymentContentSlotSection.png"])
  120 | // })
  121 |
  122 | // test("Validate Cancel and Save buttons on Customer PO Slot Page", async ({ page }) => {
  123 | //     await page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']").click()
  124 | //     const cancelBtnOnContentSlot = page.getByRole('button', { name: 'Cancel' })
  125 | //     const saveBtnOnContentSlot = page.getByRole('button', { name: 'Save' })
  126 | //     await expect(cancelBtnOnContentSlot).toHaveScreenshot(["OrderCapture/CustomerPOContentSlotSection", "CancelButtonOnCustomerPOContentSlotSection.png"])
  127 | //     await expect(saveBtnOnContentSlot).toHaveScreenshot(["OrderCapture/CustomerPOContentSlotSection", "SaveButtonOnCustomerPOContentSlotSection.png"])
  128 | // })
  129 |
  130 |
  131 | // test("Validate Product List slot", async ({ page }) => {
  132 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  133 | //     const productSearchSlot = page.getByRole('grid').filter({ has: page.locator("wol-product-card") })
  134 | //     await expect(productSearchSlot).toBeVisible()
  135 | //     await expect(productSearchSlot).toHaveScreenshot(["OrderCapture/ProductListSlotSection", "ProductListContentSlotSection.png"], { maxDiffPixels: 100, maxDiffPixelRatio: 0.02 })
  136 | // })
  137 |
  138 | // test("Validate Product Details page", async({page})=> {
  139 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  140 | //     await page.locator("wol-product-card[id*='219500']").click();
  141 | //     const getQuantityLabel = page.getByLabel("Quantity");
  142 | //     const addBtnOnProdDetailsPage = page.getByRole('button',{name:'Add'});
  143 | //     const productDetailsText = page.locator("//span[text()='Product Details']");
  144 | //     const getProductDetailsText = page.locator(".oj-flex-item h4").nth(0);
  145 | //     const getProductFeaturesText = page.locator(".oj-flex-item h4").nth(1);
  146 |
  147 | //     await expect(getQuantityLabel).toBeVisible();
  148 | //     await expect(addBtnOnProdDetailsPage).toBeVisible();
  149 | //     await expect(productDetailsText).toHaveText("Product Details");
  150 | //     await expect(getProductDetailsText).toHaveText("Product details");
  151 | //     await expect(getProductFeaturesText).toHaveText("Product features");
  152 | // })
  153 |
  154 | // test("Validate Add button on Product List section", async ({ page }) => {
  155 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  156 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  157 | //     await expect(productSearchAddBtn).toBeVisible()
  158 | // })
  159 |
  160 | // test("Validate Add product to basket section", async ({ page }) => {
  161 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  162 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  163 | //     await productSearchAddBtn.click()
  164 | //     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  165 | //     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  166 | //     await expect(productSelAddToBsktList).toBeVisible()
  167 | //     await expect(productSelAddToBsktList).toHaveScreenshot(["OrderCapture/AddToProductBasketSlotSection", "AddToProductBasketSlotSection.png"])
  168 | // })
  169 |
  170 | // test("Validate Add product to basket layout", async ({ page }) => {
  171 | //     await page.locator("input[aria-label='Product Search']").fill("D53216")
  172 | //     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 9000 })
  173 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  174 | //     await productSearchAddBtn.click()
  175 | //     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  176 | //     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  177 | //     await expect(productSelAddToBsktList).toBeVisible()
  178 | //     const addToBsktDecreaseBtn = page.locator("button[aria-label='Decrease']")
  179 | //     const addToBsktIncreaseBtn = page.locator("button[aria-label='Increase']")
  180 | //     const addToBsktDeleteBtn = page.locator("button[aria-label='Delete']")
  181 | //     await expect(addToBsktDecreaseBtn).toBeVisible();
  182 | //     await expect(addToBsktIncreaseBtn).toBeVisible();
  183 | //     await expect(addToBsktDeleteBtn).toBeVisible();
  184 |
  185 | // })
  186 |
  187 | // test("Validate Detail Slot (Add Basket Section) in Order Capture Page", async ({ page }) => {
  188 | //     const detailSlotSection = page.locator("oj-vb-fragment-slot[name='detail']")
  189 | //     await expect(detailSlotSection).toHaveScreenshot(["OrderCapture/DetailSlotSection", "DetailSlotSectionOnOrderCapturePage.png"])
  190 | // })
  191 |
  192 | // test("validate Customer Selection panel", async ({ page }) => {
  193 | //     await page.locator("span[title='Customer']").click()
  194 | //     const isCustomerSearchDisplayed = page.locator("input[aria-label='Customer Search']")
  195 | //     await expect(isCustomerSearchDisplayed).toBeVisible()
  196 | //     await page.locator("input[aria-label='Customer Search']").fill("Swales")
  197 | //     const isListOfCustomersDisplayed = page.locator("css=div[class*='ListStyles_listStyles']")
  198 | //     await expect(isListOfCustomersDisplayed).toBeVisible()
  199 |
  200 | // })
  201 |
  202 | // test("Validate Order Dialog pop up with Print and Edit Options", async ({ page }) => {
  203 | //     await page.locator("input[aria-label='Product Search']").fill("D53216")
  204 | //     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 15000 })
  205 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  206 | //     await productSearchAddBtn.click()
  207 | //     await page.waitForSelector("div[class='oj-listview-cell-element']", { state: 'visible', timeout: 16000 })
  208 | //     const productSelAddToBsktList = page.locator("div[class='oj-listview-cell-element']")
  209 | //     await expect(productSelAddToBsktList).toBeVisible({ timeout: 12000 });
  210 | //     const clickOnSubmitBtn = page.getByRole('button', { name: 'Submit' });
  211 | //     await clickOnSubmitBtn.click({ force: true });
```
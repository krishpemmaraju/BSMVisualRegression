# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate Product List slot
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:47:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('gridcell').filter({ has: locator('wol-product-card') })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('gridcell').filter({ has: locator('wol-product-card') })
    - waiting for" https://vb04.wolseleyuk.com/cloudgate/v1/oauth2/callback" navigation to finish...
    - navigated to "https://vb04.wolseleyuk.com/ic/builder/rt/wol-order-capture/live/webApps/wol-order-capture/vp/"

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:51:37
```

# Test source

```ts
   1 | import test, { chromium, expect, firefox } from "@playwright/test"
   2 | import { TIMEOUT } from "dns/promises";
   3 | import * as path from 'path';
   4 | import * as fs from 'fs';
   5 |
   6 | let page;
   7 |
   8 | test.beforeAll("Open the Order Capture URL", async () => {
   9 |   const browser = await firefox.launch({
   10 |   });
   11 |   const context = await browser.newContext({
   12 |     storageState: undefined
   13 |   });
   14 |   page = await context.newPage();
   15 |
   16 |   await page.goto("https://vb04.wolseleyuk.com/ic/builder/rt/wol-order-capture/live/webApps/wol-order-capture/vp/");
   17 |   await page.getByRole('button').filter({ hasText: 'SSO' }).click();
   18 |   await page.getByPlaceholder('first.last@domain.com').fill('krishna.pemmaraju@wolseley.co.uk')
   19 |   await page.locator("input[value='Next']").click();
   20 |   await page.getByPlaceholder('Password').fill('Varahibaba16$');
   21 |   await page.locator("input[value='Sign in']").click();
   22 |   // await page.pause()
   23 |   // await page.locator("input[value='Yes']").waitFor({ state: 'visible', timeout: 10000 })
   24 |   await page.locator("input[value='Yes']").click({force: true});
   25 |   await page.getByRole('heading').filter({ hasText: 'Order Capture' }).waitFor({ state: 'visible', timeout: 10000 })
   26 | })
   27 |
   28 | test("Order Capture - Full Page Screenshot", async () => {
   29 |   await expect(page).toHaveScreenshot(["OrderCapture", "OrderCaptureFullScreenshot.png"], { fullPage: true });
   30 | })
   31 |
   32 | test("Validate Order Capture Header Text", async () => {
   33 |   expect(await page.locator("#ojHeader_pageTitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageHeader.txt"]);
   34 |   expect(await page.locator("#ojHeader_pageSubtitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageSubHeader.txt"]);
   35 | })
   36 |
   37 | test("Validate Product search input is present", async () => {
   38 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   39 |   await expect(getSearchBarElement).toHaveAttribute('aria-label', 'Product Search')
   40 | })
   41 |
   42 | test("Validate Submit button", async () => {
   43 |   const submitButton = page.locator("button[aria-label='Submit']");
   44 |   await expect(submitButton).toHaveScreenshot(["OrderCapture/SubmitButton", "SubmitBtnOnOrderCapturePage.png"])
   45 | })
   46 |
   47 | test("Validate Product List slot", async () => {
   48 |   await page.locator("input[aria-label='Product Search']").waitFor({timeout:5000})
   49 |     await page.locator("input[aria-label='Product Search']").fill("219500")
   50 |     const productSearchSlot = page.getByRole('gridcell').filter({ has: page.locator("wol-product-card") , timeout: 25000})
>  51 |     await expect(productSearchSlot).toBeVisible()
      |                                     ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   52 |     await expect(productSearchSlot).toHaveScreenshot(["OrderCapture/ProductListSlotSection", "ProductListContentSlotSection.png"], { maxDiffPixels: 100, maxDiffPixelRatio: 0.02 })
   53 | })
   54 |
   55 | test("Validate filter buttons on Order Capture Page", async () => {
   56 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   57 |   await getSearchBarElement.click();
   58 |   const gridView = page.locator("span[role='toolbar']").filter({ has: page.getByLabel('Grid View') })
   59 |   await expect(gridView).toHaveScreenshot(["OrderCapture/ContentSlotSection", "GridViewButtonOnContentSlotSection.png"])
   60 | })
   61 |
   62 | test("Validate Select Customer section info Slot", async () => {
   63 |   const customerTextAvailable = page.locator("span[title='Customer']");
   64 |   const selectCustomerText = page.locator("div[title='Select Customer...']");
   65 |   const clickToSelectCustomer = page.locator("span[title='Click to select a customer']");
   66 |   const customerContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer']");
   67 |   const searchInputAvailableAfterClickCustomer = page.locator("oj-sp-general-drawer-template[drawer-title='Customer Details']");
   68 |   const getTextOfCustomerDetailsSection = page.locator("div[title='Customer Details']")
   69 |   const customerSearchInputAvailable = page.locator("input[aria-label='Customer Search']");
   70 |   const customerSearchResultsAvailable = page.locator('oj-c-list-view.customer-list');
   71 |   const selectCustomerListed = page.getByText('SMITH AND BYFORD LTD')
   72 |   const isSelectedCustomerVisible = page.locator("div[title='SMITH AND BYFORD LTD']")
   73 |
   74 |   await expect(customerContentSlotSelection).toBeEnabled();
   75 |   await expect(customerContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerContentSlotClickable.png"])
   76 |   await expect(customerTextAvailable).toHaveText("Customer")
   77 |   await expect(selectCustomerText).toHaveText("Select Customer...")
   78 |   await expect(clickToSelectCustomer).toHaveText("Click to select a customer")
   79 |   await customerContentSlotSelection.click()
   80 |   await expect(searchInputAvailableAfterClickCustomer).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerDetailsPanel.png"])
   81 |   await expect(getTextOfCustomerDetailsSection).toHaveText('Customer Details');
   82 |   await expect(customerSearchInputAvailable).toBeVisible({timeout:10000});
   83 |   await expect(customerSearchInputAvailable).toBeEnabled();
   84 |   await customerSearchInputAvailable.fill('SMITH AND BYFORD LTD')
   85 |   await expect(customerSearchResultsAvailable).toBeVisible({timeout: 20000});
   86 |   await selectCustomerListed.click();
   87 |   await expect(isSelectedCustomerVisible).toBeVisible();
   88 | })
   89 |
   90 | test("Validate Account Status Section", async () => {
   91 |     const isAccountStatusVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Account Status']");
   92 |     const isAccountStatusPanelAvailable = page.locator("oj-sp-general-drawer-template[drawer-title='Account Status']");
   93 |     const isAccoutnStatusHeadingAvailable = page.locator("div[title='Account Status']")
   94 |
   95 |
   96 |     await expect(isAccountStatusVisible).toBeVisible();
   97 |     await isAccountStatusVisible.click();
   98 |     await expect(isAccountStatusPanelAvailable).toBeVisible();
   99 |     await expect(isAccoutnStatusHeadingAvailable).toHaveText('Account Status');
  100 |     await page.locator("button[aria-label='Close']").scrollIntoViewIfNeeded();
  101 |     await page.locator("button[aria-label='Close']").click({force: true});
  102 | })
  103 |
  104 | test("Validate Available Balance Section", async() => {
  105 |     const isAvailableBalanceVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Available Balance']");
  106 |     const isAvailableBalancePanelAvailable = page.locator("oj-sp-general-drawer-template[drawer-title='Transaction History']");
  107 |     const isAvailableBalanceHeadingAvailable = page.locator("div[title='Transaction History']")
  108 |     const closeBtn = page.locator("button[aria-label='Close']")
  109 |
  110 |     await expect(isAvailableBalanceVisible).toBeVisible();
  111 |     await isAvailableBalanceVisible.click()
  112 |     await expect(isAvailableBalancePanelAvailable).toBeVisible();
  113 |     await expect(isAvailableBalanceHeadingAvailable).toHaveText('Transaction History')
  114 |     await closeBtn.scrollIntoViewIfNeeded();
  115 |     await closeBtn.click({force: true});
  116 | })
  117 |
  118 | test("Validate Required Section", async() => {
  119 |         const isRequiredVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Required']");
  120 |         
  121 |         await expect(isRequiredVisible).toBeVisible();
  122 | })
  123 |
  124 |
  125 | test("Validate Customer PO section info Slot", async () => {
  126 |   const customerPOTextAvailable = page.locator("span[title='Customer PO #']");
  127 |   const customerPOContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']");
  128 |   const customerPOPanelAvailable =  page.locator("oj-sp-general-drawer-template[drawer-title='Order Details']");
  129 |   const isCustomerPOHeadingAvailable = page.locator("div[title='Order Details']")
  130 |   const customerOrderInputTextAvailable = page.getByLabel("Customer Order Number")
  131 |   const isCustomerOrderNumberTextBoxAvailable = page.locator("oj-c-input-text[label-hint='Customer Order Number'] input");
  132 |   const isCancelBtnAvailableUnderCustPOSection = page.getByRole('button', {name:'Cancel'})
  133 |   const isContinueBtnAvailableUnderCustPOSection = page.getByRole('button', {name:'Continue'})
  134 |   const closeBtn = page.locator("button[aria-label='Close']")
  135 |
  136 |   await expect(customerPOTextAvailable).toHaveText("Customer PO #")
  137 |   await expect(customerPOContentSlotSelection).toBeEnabled();
  138 |   await expect(customerPOContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerPOContentSlot", "CustomerPOContentSlotClickable.png"])
  139 |   await customerPOContentSlotSelection.click();
  140 |   await expect(customerPOPanelAvailable).toBeVisible()
  141 |   expect(await isCustomerPOHeadingAvailable.textContent()).toContain("Order Details")
  142 |   await expect(customerOrderInputTextAvailable).toBeVisible();
  143 |   await expect(isCustomerOrderNumberTextBoxAvailable).toBeVisible();
  144 |   await expect(isCustomerOrderNumberTextBoxAvailable).toBeEnabled();
  145 |   await expect(isCancelBtnAvailableUnderCustPOSection).toBeVisible();
  146 |   await expect(isCancelBtnAvailableUnderCustPOSection).toBeEnabled();
  147 |   await expect(isContinueBtnAvailableUnderCustPOSection).toBeVisible();
  148 |   await expect(isContinueBtnAvailableUnderCustPOSection).toBeEnabled();
  149 |   await closeBtn.scrollIntoViewIfNeeded();
  150 |   await closeBtn.click({force: true});
  151 |
```
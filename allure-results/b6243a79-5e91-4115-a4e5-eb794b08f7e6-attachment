# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate Select Customer section info Slot
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:65:5

# Error details

```
Error: expect.toBeVisible: Error: strict mode violation: getByText('Customer') resolved to 8 elements:
    1) <div role="heading" aria-level="2" id="_oj63_title" title="Customer Details" aria-label="Customer Details" class="oj-sp-drawer-template-title oj-text-color-primary oj-typography-subheading-sm oj-line-clamp-2↵                 oj-helper-overflow-wrap-anywhere oj-helper-hyphens-auto oj-sm-margin-1x-vertical">Customer Details</div> aka getByRole('heading', { name: 'Customer Details' })
    2) <span class="oj-typography-body-xl oj-typography-bold">Customer</span> aka getByText('Customer', { exact: true }).first()
    3) <span class="oj-typography-body-lg">Select customer account</span> aka getByText('Select customer account')
    4) <span class="oj-typography-body-xs oj-text-color-secondary">Customer</span> aka getByText('Customer', { exact: true }).nth(1)
    5) <span title="Customer" class="oj-sp-scoreboard-metric-card-title  oj-text-color-primary↵                oj-typography-body-sm oj-line-clamp-1">Customer</span> aka getByTitle('Customer', { exact: true })
    6) <div title="Select Customer..." class="oj-sp-scoreboard-metric-card-metric oj-flex-item oj-text-color-primary↵                         oj-typography-bold oj-typography-body-md oj-line-clamp-1">Select Customer...</div> aka getByText('Select Customer...')
    7) <span title="Click to select a customer" class="oj-sp-scoreboard-metric-card-meta-text oj-typography-body-xs oj-text-color-secondary oj-line-clamp-1">Click to select a customer</span> aka getByText('Click to select a customer')
    8) <span title="Customer PO #" class="oj-sp-scoreboard-metric-card-title  oj-text-color-primary↵                oj-typography-body-sm oj-line-clamp-1">Customer PO #</span> aka getByText('Customer PO #')

Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByText('Customer')

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:92:43
```

# Test source

```ts
   1 | import test, { chromium, expect, firefox } from "@playwright/test"
   2 | import { TIMEOUT } from "dns/promises";
   3 | import * as path from 'path';
   4 | import * as fs from 'fs';
   5 |
   6 | let page;
   7 |
   8 | test.beforeAll("Open the Order Capture URL", async () => {
   9 |   const browser = await firefox.launch({
   10 |     slowMo: 1000
   11 |   });
   12 |   const context = await browser.newContext({
   13 |     storageState: undefined
   14 |   });
   15 |   page = await context.newPage();
   16 |
   17 |   await page.goto("https://vb04.wolseleyuk.com/ic/builder/rt/wol-order-capture/live/webApps/wol-order-capture/vp/");
   18 |   await page.getByRole('button').filter({ hasText: 'SSO' }).click();
   19 |   await page.getByPlaceholder('first.last@domain.com').fill(Buffer.from('a3Jpc2huYS5wZW1tYXJhanVAd29sc2VsZXkuY28udWs=','base64').toString('utf-8'));
   20 |   await page.locator("input[value='Next']").click();
   21 |   await page.getByPlaceholder('Password').fill(Buffer.from('VmFyYWhpYmFiYTE2JA==','base64').toString('utf-8'));
   22 |   await page.locator("input[value='Sign in']").click();
   23 |   // await page.pause()
   24 |   // await page.locator("input[value='Yes']").waitFor({ state: 'visible', timeout: 10000 })
   25 |   await page.locator("input[value='Yes']").click({force: true});
   26 |   await page.getByRole('heading').filter({ hasText: 'Order Capture' }).waitFor({ state: 'visible', timeout: 10000 })
   27 | })
   28 |
   29 | test.skip("Order Capture - Full Page Screenshot", async () => {
   30 |   await expect(page).toHaveScreenshot(["OrderCapture", "OrderCaptureFullScreenshot.png"], { fullPage: true });
   31 | })
   32 |
   33 | test.skip("Validate Order Capture Header Text", async () => {
   34 |   expect(await page.locator("#ojHeader_pageTitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageHeader.txt"]);
   35 |   expect(await page.locator("#ojHeader_pageSubtitle").textContent()).toMatchSnapshot(["OrderCapture/HeaderTexts", "OrderCapturePageSubHeader.txt"]);
   36 | })
   37 |
   38 | test.skip("Validate Product search input is present", async () => {
   39 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   40 |   await expect(getSearchBarElement).toHaveAttribute('aria-label', 'Product Search')
   41 | })
   42 |
   43 | test.skip("Validate Submit button", async () => {
   44 |   const submitButton = page.locator("button[aria-label='Submit']");
   45 |   await expect(submitButton).toHaveScreenshot(["OrderCapture/SubmitButton", "SubmitBtnOnOrderCapturePage.png"])
   46 | })
   47 |
   48 | test.skip("Validate Product List slot", async () => {
   49 |   const prodSearchInputSlot = page.locator("input[aria-label='Product Search']");
   50 |     await prodSearchInputSlot.waitFor({timeout:5000})
   51 |     await prodSearchInputSlot.scrollIntoViewIfNeeded();
   52 |     await prodSearchInputSlot.fill("219500")
   53 |     const productSearchSlot = page.getByRole('gridcell').filter({ has: page.locator("wol-product-card") , timeout: 25000})
   54 |     await expect(productSearchSlot).toBeVisible({timeout:5000})
   55 |     await expect(productSearchSlot).toHaveScreenshot(["OrderCapture/ProductListSlotSection", "ProductListContentSlotSection.png"], { maxDiffPixels: 100, maxDiffPixelRatio: 0.02 })
   56 | })
   57 |
   58 | test.skip("Validate filter buttons on Order Capture Page", async () => {
   59 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   60 |   await getSearchBarElement.click();
   61 |   const gridView = page.locator("span[role='toolbar']").filter({ has: page.getByLabel('Grid View') })
   62 |   await expect(gridView).toHaveScreenshot(["OrderCapture/ContentSlotSection", "GridViewButtonOnContentSlotSection.png"])
   63 | })
   64 |
   65 | test("Validate Select Customer section info Slot", async () => {
   66 |   const customerTextAvailable = page.locator("span[title='Customer']");
   67 |   const selectCustomerText = page.locator("div[title='Select Customer...']");
   68 |   const clickToSelectCustomer = page.locator("span[title='Click to select a customer']");
   69 |   const customerContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer']");
   70 |   const searchInputAvailableAfterClickCustomer = page.locator("oj-sp-general-drawer-template[drawer-title='Customer Details']");
   71 |   const getTextOfCustomerDetailsSection = page.locator("div[title='Customer Details']")
   72 |   // New Changes
   73 |   const isCustomerDrpDwnAvailable = page.getByText('Customer');
   74 |   const isCustomerSelectCustomerAccountAvailable = page.getByText("Select customer account");
   75 |   const clickOnCustomerDrpDwn = page.locator('div.fake-dropdown').filter(page.getByText('Customer'));
   76 |
   77 |   const customerSearchInputAvailable = page.locator("input[aria-label='Customer Search']");
   78 |   const customerSearchResultsAvailable = page.locator('oj-table.customer-table');
   79 |   const selectCustomerListed = page.getByText('SMITH AND BYFORD LTD')
   80 |   const isSelectedCustomerVisible = page.locator("div[title='SMITH AND BYFORD LTD']")
   81 |
   82 |   await expect(customerContentSlotSelection).toBeEnabled();
   83 |   await expect(customerContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerContentSlotClickable.png"])
   84 |   await expect(customerTextAvailable).toHaveText("Customer")
   85 |   await expect(selectCustomerText).toHaveText("Select Customer...")
   86 |   await expect(clickToSelectCustomer).toHaveText("Click to select a customer")
   87 |   await customerContentSlotSelection.click()
   88 |   await expect(searchInputAvailableAfterClickCustomer).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerDetailsPanel.png"])
   89 |   await expect(getTextOfCustomerDetailsSection).toHaveText('Customer Details');
   90 |   await expect(isCustomerSelectCustomerAccountAvailable).toBeVisible();
   91 |
>  92 |   await expect(isCustomerDrpDwnAvailable).toBeVisible();
      |                                           ^ Error: expect.toBeVisible: Error: strict mode violation: getByText('Customer') resolved to 8 elements:
   93 |   await expect(customerSearchInputAvailable).toBeVisible({timeout:10000});
   94 |   await expect(customerSearchInputAvailable).toBeEnabled();
   95 |   await customerSearchInputAvailable.fill('SMITH AND BYFORD LTD')
   96 |   await expect(customerSearchResultsAvailable).toBeVisible({timeout: 20000});
   97 |   await selectCustomerListed.click();
   98 |   await expect(isSelectedCustomerVisible).toBeVisible();
   99 | })
  100 |
  101 | test.skip("Validate Account Status Section", async () => {
  102 |     const isAccountStatusVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Account Status']");
  103 |     const isAccountStatusPanelAvailable = page.locator("oj-sp-general-drawer-template[drawer-title='Account Status']");
  104 |     const isAccoutnStatusHeadingAvailable = page.locator("div[title='Account Status']")
  105 |
  106 |
  107 |     await expect(isAccountStatusVisible).toBeVisible();
  108 |     await isAccountStatusVisible.click();
  109 |     await expect(isAccountStatusPanelAvailable).toBeVisible();
  110 |     await expect(isAccoutnStatusHeadingAvailable).toHaveText('Account Status');
  111 |     await page.locator("button[aria-label='Close']").scrollIntoViewIfNeeded();
  112 |     await page.locator("button[aria-label='Close']").click({force: true});
  113 | })
  114 |
  115 | test.skip("Validate Available Balance Section", async() => {
  116 |     const isAvailableBalanceVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Available Balance']");
  117 |     const isAvailableBalancePanelAvailable = page.locator("oj-sp-general-drawer-template[drawer-title='Transaction History']");
  118 |     const isAvailableBalanceHeadingAvailable = page.locator("div[title='Transaction History']")
  119 |     const closeBtn = page.locator("button[aria-label='Close']")
  120 |
  121 |     await expect(isAvailableBalanceVisible).toBeVisible();
  122 |     await isAvailableBalanceVisible.click()
  123 |     await expect(isAvailableBalancePanelAvailable).toBeVisible();
  124 |     await expect(isAvailableBalanceHeadingAvailable).toHaveText('Transaction History')
  125 |     await closeBtn.scrollIntoViewIfNeeded();
  126 |     await closeBtn.click({force: true});
  127 | })
  128 |
  129 | test.skip("Validate Required Section", async() => {
  130 |         const isRequiredVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Required']");
  131 |         
  132 |         await expect(isRequiredVisible).toBeVisible();
  133 | })
  134 |
  135 |
  136 | test.skip("Validate Customer PO section info Slot", async () => {
  137 |   const customerPOTextAvailable = page.locator("span[title='Customer PO #']");
  138 |   const customerPOContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']");
  139 |   const customerPOPanelAvailable =  page.locator("oj-sp-general-drawer-template[drawer-title='Order Details']");
  140 |   const isCustomerPOHeadingAvailable = page.locator("div[title='Order Details']")
  141 |   const customerOrderInputTextAvailable = page.getByLabel("Customer Order Number")
  142 |   const isCustomerOrderNumberTextBoxAvailable = page.locator("oj-c-input-text[label-hint='Customer Order Number'] input");
  143 |   const isCancelBtnAvailableUnderCustPOSection = page.getByRole('button', {name:'Cancel'})
  144 |   const isContinueBtnAvailableUnderCustPOSection = page.getByRole('button', {name:'Continue'})
  145 |   const closeBtn = page.locator("button[aria-label='Close']")
  146 |
  147 |   await expect(customerPOTextAvailable).toHaveText("Customer PO #")
  148 |   await expect(customerPOContentSlotSelection).toBeEnabled();
  149 |   await expect(customerPOContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerPOContentSlot", "CustomerPOContentSlotClickable.png"])
  150 |   await customerPOContentSlotSelection.click();
  151 |   await expect(customerPOPanelAvailable).toBeVisible()
  152 |   expect(await isCustomerPOHeadingAvailable.textContent()).toContain("Order Details")
  153 |   await expect(customerOrderInputTextAvailable).toBeVisible();
  154 |   await expect(isCustomerOrderNumberTextBoxAvailable).toBeVisible();
  155 |   await expect(isCustomerOrderNumberTextBoxAvailable).toBeEnabled();
  156 |   await expect(isCancelBtnAvailableUnderCustPOSection).toBeVisible();
  157 |   await expect(isCancelBtnAvailableUnderCustPOSection).toBeEnabled();
  158 |   await expect(isContinueBtnAvailableUnderCustPOSection).toBeVisible();
  159 |   await expect(isContinueBtnAvailableUnderCustPOSection).toBeEnabled();
  160 |   await closeBtn.scrollIntoViewIfNeeded();
  161 |   await closeBtn.click({force: true});
  162 |
  163 | })
  164 |
  165 | test.skip("Validate Loyalty Program Section", async() => {
  166 |     const isLoyaltyProgramTextVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Loyalty Program']");
  167 |     await expect(isLoyaltyProgramTextVisible).toBeVisible();
  168 | })
  169 |
  170 |
  171 |
  172 | test.skip("Validate Product Details page", async()=> {
  173 |     await page.locator("input[aria-label='Product Search']").waitFor({timeout: 6000});
  174 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  175 |     await page.locator("#searchInputContainer_tbProductSearch").click()
  176 |     await page.locator("wol-product-card[id*='219500']").click();
  177 |     const getQuantityLabel = page.getByLabel("Quantity");
  178 |     const addBtnOnProdDetailsPage = page.getByRole('button',{name:'Add to Basket'});
  179 |     const productDetailsText = page.locator("div.oj-flex.oj-sm-flex-direction-column   div.oj-typography-body-md.oj-flex-item.oj-sm-flex-initial");
  180 |     const getAlternateProductLink = page.locator("div.oj-collapsible-header-wrapper").nth(0);
  181 |     const getRelatedProducts = page.locator("div.oj-collapsible-header-wrapper").nth(1);
  182 |     await expect(getAlternateProductLink).toHaveText("Alternate Products");
  183 |     await expect(getRelatedProducts).toHaveText("Related Products");
  184 |     await page.locator("button[aria-label='Back']").click()
  185 | })
  186 |
  187 |
  188 |
  189 | test.skip("Validate Add button on Product Search Page section", async () => {
  190 |     // await page.locator("input[aria-label='Product Search']").waitFor({timeout:5000})
  191 |     // await page.locator("input[aria-label='Product Search']").fill('');
  192 |     // await page.locator("input[aria-label='Product Search']").fill("D53216")
```
# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate Product List slot
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:133:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('grid').filter({ has: locator('wol-product-card') })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('grid').filter({ has: locator('wol-product-card') })
    - waiting for" https://vb04.wolseleyuk.com/ic/builder/protected?appid=wol-order-capture&appver=live&endUri=webApps/wol-order-capture/vp/" navigation to finish...
    - navigated to "https://vb04.wolseleyuk.com/ic/builder/rt/wol-order-capture/live/webApps/wol-order-capture/vp/"

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:136:37
```

# Test source

```ts
   36 |
   37 | test("Validate Product search input is present", async () => {
   38 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
   39 |   await expect(getSearchBarElement).toHaveAttribute('aria-label', 'Product Search')
   40 | })
   41 |
   42 | test("Validate Submit button", async () => {
   43 |   const submitButton = page.getByRole("button", { name: 'Submit' });
   44 |   await expect(submitButton).toHaveScreenshot(["OrderCapture/SubmitButton", "SubmitBtnOnOrderCapturePage.png"])
   45 | })
   46 |
   47 | test("Validate Select Customer section info Slot", async () => {
   48 |   const customerTextAvailable = page.locator("span[title='Customer']");
   49 |   const selectCustomerText = page.locator("div[title='Select Customer...']");
   50 |   const clickToSelectCustomer = page.locator("span[title='Click to select a customer']");
   51 |   const customerContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer']");
   52 |   const searchInputAvailableAfterClickCustomer = page.locator("input[aria-label='Customer Search']")
   53 |
   54 |
   55 |   await expect(customerTextAvailable).toHaveText("Customer")
   56 |   await expect(selectCustomerText).toHaveText("Select Customer...")
   57 |   await expect(clickToSelectCustomer).toHaveText("Click to select a customer")
   58 |   await expect(customerContentSlotSelection).toBeEnabled();
   59 |   await customerContentSlotSelection.click();
   60 |   await expect(searchInputAvailableAfterClickCustomer).toBeVisible()
   61 |   await expect(searchInputAvailableAfterClickCustomer).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerSearchInputTextBox.png"])
   62 |   await expect(customerContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerContentSlot", "CustomerContentSlotClickable.png"])
   63 | })
   64 |
   65 | // test("Validate Payment section info Slot", async ({ page }) => {
   66 | //     const clickOnPaymentBtn = page.locator("span[title='Payment Method']");
   67 | //     const paymentTextAvailable = page.locator("span[title='Payment Method']");
   68 | //     const paymentContentSlotSelection = page.locator("oj-vb-fragment[name='wol-oc-payment']");
   69 | //     const paymentAccountButton = page.getByRole('button', {name:'Account'});
   70 |
   71 | //     await clickOnPaymentBtn.click();
   72 | //     await expect(paymentTextAvailable).toHaveText("Payment Method")
   73 | //     await expect(paymentContentSlotSelection).toBeVisible();
   74 | //     await expect(paymentContentSlotSelection).toHaveScreenshot(["OrderCapture/PaymentContentSlot", "PaymentContentSlotClickable.png"])
   75 | //     await expect(paymentAccountButton).toBeVisible();
   76 | // })
   77 |
   78 | test("Validate Shipment method section layout", async () => {
   79 |   const shipmentMethodSection = page.locator("oj-sp-scoreboard-metric-card[card-title='Shipping Method']")
   80 |   const shipmentContentAvaialble = page.locator("oj-vb-fragment[name='wol-oc-shipping']")
   81 |   const getTextOfShippingDelivery = page.locator("oj-vb-fragment[name='wol-oc-shipping']").filter({ has: page.locator("oj-vb-fragment-slot[name='content']") }).
   82 |     filter({ has: page.locator("div[class*='oj-flex']") }).filter({ has: page.locator("span") });
   83 |
   84 |   await expect(shipmentMethodSection).toBeVisible();
   85 |   await shipmentMethodSection.click();
   86 |   await expect(shipmentContentAvaialble).toBeVisible();
   87 |   expect(await getTextOfShippingDelivery.textContent()).toContain("Shipping and Delivery")
   88 |
   89 | })
   90 |
   91 | test("Validate Customer PO section info Slot", async () => {
   92 |   const customerPOTextAvailable = page.locator("span[title='Customer PO #']");
   93 |   const customerPOContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']");
   94 |   const customerPOContentHeaderAfterClick = page.locator("oj-vb-fragment[name='wol-oc-order-details']").filter({ has: page.locator("oj-vb-fragment-slot[name='content']") }).
   95 |     filter({ has: page.locator("div[class*='oj-flex']") }).filter({ has: page.locator("span") });
   96 |   const customerOrderInputTextAVailable = page.getByLabel("Customer Order Number")
   97 |   const requiredByDateInputAvailable = page.locator("div[class*='oj-inputdatetime-input-container']").filter({ has: page.getByRole('combobox') })
   98 |
   99 |   await expect(customerPOTextAvailable).toHaveText("Customer PO #")
  100 |   await expect(customerPOContentSlotSelection).toBeEnabled();
  101 |   await expect(customerPOContentSlotSelection).toHaveScreenshot(["OrderCapture/CustomerPOContentSlot", "CustomerPOContentSlotClickable.png"])
  102 |   await customerPOContentSlotSelection.click();
  103 |   expect(await customerPOContentHeaderAfterClick.textContent()).toContain("Order Details")
  104 |   await expect(customerOrderInputTextAVailable).toBeVisible();
  105 |   await expect(requiredByDateInputAvailable).toBeVisible();
  106 | })
  107 |
  108 |
  109 | test("Validate filter buttons on Order Capture Page", async () => {
  110 |   const getSearchBarElement = page.getByRole('textbox', { name: 'Product Search' })
  111 |   await getSearchBarElement.click();
  112 |   const gridView = page.locator("span[role='toolbar']").filter({ has: page.getByLabel('Grid View') })
  113 |   await expect(gridView).toHaveScreenshot(["OrderCapture/ContentSlotSection", "GridViewButtonOnContentSlotSection.png"])
  114 | })
  115 |
  116 | // test.skip("Validate Cancel and Save buttons on Payment Slot Page", async ({ page }) => {
  117 | //     await page.locator("oj-sp-scoreboard-metric-card[card-title='Payment Method']").click({ timeout: 2000 })
  118 | //     const cancelBtnOnContentSlot = page.getByRole('button', { name: 'Cancel' })
  119 | //     const saveBtnOnContentSlot = page.getByRole('button', { name: 'Save' })
  120 | //     await expect(cancelBtnOnContentSlot).toHaveScreenshot(["OrderCapture/PaymentContentSlotSection", "CancelButtonOnPaymentContentSlotSection.png"])
  121 | //     await expect(saveBtnOnContentSlot).toHaveScreenshot(["OrderCapture/PaymentContentSlotSection", "SaveButtonOnPaymentContentSlotSection.png"])
  122 | // })
  123 |
  124 | test("Validate Cancel and Save buttons on Customer PO Slot Page", async () => {
  125 |     await page.locator("oj-sp-scoreboard-metric-card[card-title='Customer PO #']").click()
  126 |     const cancelBtnOnContentSlot = page.getByRole('button', { name: 'Cancel' })
  127 |     const saveBtnOnContentSlot = page.getByRole('button', { name: 'Save' })
  128 |     await expect(cancelBtnOnContentSlot).toHaveScreenshot(["OrderCapture/CustomerPOContentSlotSection", "CancelButtonOnCustomerPOContentSlotSection.png"])
  129 |     await expect(saveBtnOnContentSlot).toHaveScreenshot(["OrderCapture/CustomerPOContentSlotSection", "SaveButtonOnCustomerPOContentSlotSection.png"])
  130 | })
  131 |
  132 |
  133 | test("Validate Product List slot", async () => {
  134 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  135 |     const productSearchSlot = page.getByRole('grid').filter({ has: page.locator("wol-product-card") })
> 136 |     await expect(productSearchSlot).toBeVisible()
      |                                     ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  137 |     await expect(productSearchSlot).toHaveScreenshot(["OrderCapture/ProductListSlotSection", "ProductListContentSlotSection.png"], { maxDiffPixels: 100, maxDiffPixelRatio: 0.02 })
  138 | })
  139 |
  140 | test("Validate Product Details page", async()=> {
  141 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  142 |     await page.locator("wol-product-card[id*='219500']").click();
  143 |     const getQuantityLabel = page.getByLabel("Quantity");
  144 |     const addBtnOnProdDetailsPage = page.getByRole('button',{name:'Add to Basket'});
  145 |     const productDetailsText = page.locator("div.oj-flex.oj-sm-flex-direction-column   div.oj-typography-body-md.oj-flex-item.oj-sm-flex-initial");
  146 |     const getAlternateProductLink = page.locator("div.oj-collapsible-header-wrapper").nth(0);
  147 |     const getRelatedProducts = page.locator("div.oj-collapsible-header-wrapper").nth(1);
  148 |
  149 |     // await expect(getQuantityLabel).toBeVisible();
  150 |     // await expect(addBtnOnProdDetailsPage).toBeVisible();
  151 |     // await expect(productDetailsText.textContent()).toHaveCount(1);
  152 |     await expect(getAlternateProductLink).toHaveText("Alternate Products");
  153 |     await expect(getRelatedProducts).toHaveText("Related Products");
  154 | })
  155 |
  156 | test("Validate Add button on Product Search Page section", async () => {
  157 |   await page.locator("input[aria-label='Product Search']").click();
  158 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  159 |     const isAtpDateVisible = page.locator('span.oj-flex-item.oj-badge.custom-badge-atp');
  160 |     const isAvailableStockVisible = page.locator('span.oj-badge.oj-badge-sm.custom-badge');
  161 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  162 |     await expect(isAtpDateVisible).toBeVisible();
  163 |     await expect(isAvailableStockVisible).toBeVisible();
  164 |     await expect(page.locator('wol-stock-quantity.oj-complete')).toHaveCount(1);
  165 |     await expect(productSearchAddBtn).toBeVisible()
  166 | })
  167 |
  168 | // test("Validate Add product to basket section", async ({ page }) => {
  169 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  170 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  171 | //     await productSearchAddBtn.click()
  172 | //     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  173 | //     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  174 | //     await expect(productSelAddToBsktList).toBeVisible()
  175 | //     await expect(productSelAddToBsktList).toHaveScreenshot(["OrderCapture/AddToProductBasketSlotSection", "AddToProductBasketSlotSection.png"])
  176 | // })
  177 |
  178 | test("Validate Add product to basket layout and Validate Auto populate fields", async () => {
  179 |     await page.locator("input[aria-label='Product Search']").fill("D53216")
  180 |     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 9000 })
  181 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  182 |     await productSearchAddBtn.click()
  183 |     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  184 |     await expect(page.getByRole('button',{name:'Save'})).toBeVisible();
  185 |     const isCustomerAutoPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Customer'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  186 |     expect(isCustomerAutoPopulated).not.toBeNull();
  187 |     const isBillToAutoPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Bill to'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  188 |     expect(isBillToAutoPopulated).not.toBeNull();
  189 |     const isRequiredPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Required'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  190 |     expect(isRequiredPopulated).not.toBeNull();
  191 |     const isShippingMethodPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Shipping Method'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  192 |     expect(isShippingMethodPopulated).not.toBeNull();
  193 |     const isClearAllVisible = await page.getByRole('button',{name: 'Clear All'});
  194 |     expect(isClearAllVisible).toBeVisible()
  195 |     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  196 |     await expect(productSelAddToBsktList).toBeVisible()
  197 |     const addToBsktDecreaseBtn = page.locator("div.oj-listview-cell-element button[aria-label='Decrease']")
  198 |     const addToBsktIncreaseBtn = page.locator("div.oj-listview-cell-element button[aria-label='Increase']")
  199 |     const addToBsktDeleteBtn = page.locator("button[aria-label='Delete']")
  200 |     const isSubTotalDisplayed =  page.getByText('Sub Total');
  201 |     const isVATDisplayed =  page.getByText('VAT');
  202 |     const isTotalDisplayed =  page.getByText('Total');
  203 |     await expect(isSubTotalDisplayed).toBeVisible();
  204 |     await expect(isVATDisplayed).toBeVisible();
  205 |     await expect(isTotalDisplayed).toBeVisible();
  206 |     await expect(addToBsktDecreaseBtn).toBeVisible();
  207 |     await expect(addToBsktIncreaseBtn).toBeVisible();
  208 |     await expect(addToBsktDeleteBtn).toBeVisible();
  209 | })
  210 |
  211 | test("Validate Detail Slot (Add Basket Section) in Order Capture Page", async () => {
  212 |     const detailSlotSection = page.locator("oj-vb-fragment-slot[name='detail']")
  213 |     await expect(detailSlotSection).toHaveScreenshot(["OrderCapture/DetailSlotSection", "DetailSlotSectionOnOrderCapturePage.png"])
  214 | })
  215 |
  216 | test("validate Customer Selection panel", async () => {
  217 |     await page.locator("span[title='Customer']").click()
  218 |     const isCustomerSearchDisplayed = page.locator("input[aria-label='Customer Search']")
  219 |     await expect(isCustomerSearchDisplayed).toBeVisible()
  220 |     await page.locator("input[aria-label='Customer Search']").fill("Swales")
  221 |     const isListOfCustomersDisplayed = page.locator("css=div[class*='ListStyles_listStyles']")
  222 |     await expect(isListOfCustomersDisplayed).toBeVisible()
  223 |
  224 | })
  225 |
  226 | // test("Validate Order Dialog pop up with Print and Edit Options", async ({ page }) => {
  227 | //     await page.locator("input[aria-label='Product Search']").fill("D53216")
  228 | //     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 15000 })
  229 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  230 | //     await productSearchAddBtn.click()
  231 | //     await page.waitForSelector("div[class='oj-listview-cell-element']", { state: 'visible', timeout: 16000 })
  232 | //     const productSelAddToBsktList = page.locator("div[class='oj-listview-cell-element']")
  233 | //     await expect(productSelAddToBsktList).toBeVisible({ timeout: 12000 });
  234 | //     const clickOnSubmitBtn = page.getByRole('button', { name: 'Submit' });
  235 | //     await clickOnSubmitBtn.click({ force: true });
  236 | //     await page.getByRole('heading', { name: 'Checkout', exact: true }).waitFor({ state: 'visible' });
```
# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Order Capture - Full Page Screenshot
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_V1.spec.ts:23:5

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for locator('a[title=\'Sign Out\']')

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_V1.spec.ts:231:47
```

# Test source

```ts
  131 |     await expect(productSearchSlot).toHaveScreenshot(["OrderCapture/ProductListSlotSection", "ProductListContentSlotSection.png"], { maxDiffPixels: 100, maxDiffPixelRatio: 0.02 })
  132 | })
  133 |
  134 | test("Validate Product Details page", async({page})=> {
  135 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  136 |     await page.locator("wol-product-card[id*='219500']").click();
  137 |     const getQuantityLabel = page.getByLabel("Quantity");
  138 |     const addBtnOnProdDetailsPage = page.getByRole('button',{name:'Add'});
  139 |     const productDetailsText = page.locator("//span[text()='Product Details']");
  140 |     const getProductDetailsText = page.locator(".oj-flex-item h4").nth(0);
  141 |     const getProductFeaturesText = page.locator(".oj-flex-item h4").nth(1);
  142 |
  143 |     await expect(getQuantityLabel).toBeVisible();
  144 |     await expect(addBtnOnProdDetailsPage).toBeVisible();
  145 |     await expect(productDetailsText).toHaveText("Product Details");
  146 |     await expect(getProductDetailsText).toHaveText("Product details");
  147 |     await expect(getProductFeaturesText).toHaveText("Product features");
  148 | })
  149 |
  150 | test("Validate Add button on Product List section", async ({ page }) => {
  151 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  152 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  153 |     await expect(productSearchAddBtn).toBeVisible()
  154 | })
  155 |
  156 | test("Validate Add product to basket section", async ({ page }) => {
  157 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  158 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  159 |     await productSearchAddBtn.click()
  160 |     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  161 |     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  162 |     await expect(productSelAddToBsktList).toBeVisible()
  163 |     await expect(productSelAddToBsktList).toHaveScreenshot(["OrderCapture/AddToProductBasketSlotSection", "AddToProductBasketSlotSection.png"])
  164 | })
  165 |
  166 | test("Validate Add product to basket layout", async ({ page }) => {
  167 |     await page.locator("input[aria-label='Product Search']").fill("D53216")
  168 |     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 9000 })
  169 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  170 |     await productSearchAddBtn.click()
  171 |     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  172 |     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  173 |     await expect(productSelAddToBsktList).toBeVisible()
  174 |     const addToBsktDecreaseBtn = page.locator("button[aria-label='Decrease']")
  175 |     const addToBsktIncreaseBtn = page.locator("button[aria-label='Increase']")
  176 |     const addToBsktDeleteBtn = page.locator("button[aria-label='Delete']")
  177 |     await expect(addToBsktDecreaseBtn).toBeVisible();
  178 |     await expect(addToBsktIncreaseBtn).toBeVisible();
  179 |     await expect(addToBsktDeleteBtn).toBeVisible();
  180 |
  181 | })
  182 |
  183 | test("Validate Detail Slot (Add Basket Section) in Order Capture Page", async ({ page }) => {
  184 |     const detailSlotSection = page.locator("oj-vb-fragment-slot[name='detail']")
  185 |     await expect(detailSlotSection).toHaveScreenshot(["OrderCapture/DetailSlotSection", "DetailSlotSectionOnOrderCapturePage.png"])
  186 | })
  187 |
  188 | test("validate Customer Selection panel", async ({ page }) => {
  189 |     await page.locator("span[title='Customer']").click()
  190 |     const isCustomerSearchDisplayed = page.locator("input[aria-label='Customer Search']")
  191 |     await expect(isCustomerSearchDisplayed).toBeVisible()
  192 |     await page.locator("input[aria-label='Customer Search']").fill("Swales")
  193 |     const isListOfCustomersDisplayed = page.locator("css=div[class*='ListStyles_listStyles']")
  194 |     await expect(isListOfCustomersDisplayed).toBeVisible()
  195 |
  196 | })
  197 |
  198 | test("Validate Order Dialog pop up with Print and Edit Options", async ({ page }) => {
  199 |     await page.locator("input[aria-label='Product Search']").fill("D53216")
  200 |     await page.getByRole('button', { name: 'Add' }).waitFor({ state: 'visible', timeout: 15000 })
  201 |     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  202 |     await productSearchAddBtn.click()
  203 |     await page.waitForSelector("div[class='oj-listview-cell-element']", { state: 'visible', timeout: 16000 })
  204 |     const productSelAddToBsktList = page.locator("div[class='oj-listview-cell-element']")
  205 |     await expect(productSelAddToBsktList).toBeVisible({ timeout: 12000 });
  206 |     const clickOnSubmitBtn = page.getByRole('button', { name: 'Submit' });
  207 |     await clickOnSubmitBtn.click({ force: true });
  208 |     await page.getByRole('heading', { name: 'Checkout', exact: true }).waitFor({ state: 'visible' });
  209 |
  210 |     const waitForPickingNoteHeaderText = page.locator("//span[text()='Print picking note']");
  211 |     const waitForEditBsktItemChk = page.locator("//span[text()='Have you picked ALL stock items?']");
  212 |     await expect(waitForPickingNoteHeaderText).toBeVisible();
  213 |     await expect(waitForEditBsktItemChk).toBeVisible();
  214 |     const isPrintBtnAvailableOnOrderDialog = page.getByRole('button',{name:'Print'});
  215 |     await expect(isPrintBtnAvailableOnOrderDialog).toBeVisible();
  216 |     const isEditBtnAvailableOnOrderDialog = page.getByRole('button').filter({hasText:'Edit'});
  217 |     await expect(isEditBtnAvailableOnOrderDialog).toBeVisible();
  218 |     (await page.waitForSelector("//button[text()='Confirm']")).waitForElementState('enabled');
  219 |     await page.locator("//button[text()='Confirm']").click({timeout:5000});
  220 |     expect(await page.locator("#oj_gop1_h_pageTitle").textContent()).toMatchSnapshot(["OrderCapture/OrderConfirmation", "OrderConfirmationHeader.txt"]);
  221 | })
  222 |
  223 | test.skip("Validate Extended button under Detail Slot section", async ({ page }) => {
  224 |     const extendedBtnOnDetailSlot = page.getByRole('button', { name: 'Extended' })
  225 |     await expect(extendedBtnOnDetailSlot).toHaveScreenshot(["OrderCapture/DetailSlotSection", "ExtendedBtnDetailSlotSectionOnOrderCapturePage.png"])
  226 | })
  227 |
  228 |
  229 | test.afterEach("Sign Out from application", async ({ page }) => {
  230 |     await page.locator("a[title='Settings and Actions']").click()
> 231 |     await page.locator("a[title='Sign Out']").click()
      |                                               ^ Error: locator.click: Target page, context or browser has been closed
  232 |     await page.waitForSelector('#Confirm', { state: 'visible' })
  233 |     await page.locator('#Confirm').click()
  234 | })
```
# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate Order Dialog pop up with Print and Edit Options
- Location: C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:256:5

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for locator('button[aria-label=\'Clear All\']')

    at C:\Automation\AutomationNewSVN\AutoMisc\visualregression\tests\OrderCaptureTestsVisualRegression_NewUI.spec.ts:264:30
```

# Test source

```ts
  164 |   await closeBtn.click({force: true});
  165 |
  166 | })
  167 |
  168 | test.skip("Validate Loyalty Program Section", async() => {
  169 |     const isLoyaltyProgramTextVisible = page.locator("oj-sp-scoreboard-metric-card[card-title='Loyalty Program']");
  170 |     await expect(isLoyaltyProgramTextVisible).toBeVisible();
  171 | })
  172 |
  173 |
  174 |
  175 | test("Validate Product Details page", async()=> {
  176 |     await page.locator("input[aria-label='Product Search']").waitFor({timeout: 6000});
  177 |     await page.locator("input[aria-label='Product Search']").fill("219500")
  178 |     await page.locator("#searchInputContainer_tbProductSearch").click()
  179 |     await page.locator("wol-product-card[id*='219500']").click();
  180 |     const getQuantityLabel = page.getByLabel("Quantity");
  181 |     const addBtnOnProdDetailsPage = page.getByRole('button',{name:'Add to Basket'});
  182 |     const productDetailsText = page.locator("div.oj-flex.oj-sm-flex-direction-column   div.oj-typography-body-md.oj-flex-item.oj-sm-flex-initial");
  183 |     const getAlternateProductLink = page.locator("div.oj-collapsible-header-wrapper").nth(0);
  184 |     const getRelatedProducts = page.locator("div.oj-collapsible-header-wrapper").nth(1);
  185 |     await expect(getAlternateProductLink).toHaveText("Alternate Products");
  186 |     await expect(getRelatedProducts).toHaveText("Related Products");
  187 |     await page.locator("button[aria-label='Back']").click()
  188 | })
  189 |
  190 |
  191 |
  192 | test("Validate Add button on Product Search Page section", async () => {
  193 |     // await page.locator("input[aria-label='Product Search']").waitFor({timeout:5000})
  194 |     // await page.locator("input[aria-label='Product Search']").fill('');
  195 |     // await page.locator("input[aria-label='Product Search']").fill("D53216")
  196 |     const isAtpDateVisible = page.locator('span.oj-flex-item.oj-badge.custom-badge-atp');
  197 |     const isAvailableStockVisible = page.locator('span.oj-badge.oj-badge-sm.custom-badge');
  198 |     const productSearchAddBtn = page.locator("button[aria-label='Add']")
  199 |     await productSearchAddBtn.scrollIntoViewIfNeeded()
  200 |     await productSearchAddBtn.waitFor({state:'visible',timeout: 8000});
  201 |     await expect(productSearchAddBtn).toBeVisible({timeout:8000})
  202 |     await expect(isAtpDateVisible).toBeVisible();
  203 |     await expect(isAvailableStockVisible).toBeVisible();
  204 |     await expect(page.locator('wol-stock-quantity.oj-complete')).toHaveCount(1);
  205 | })
  206 |
  207 | // test("Validate Add product to basket section", async ({ page }) => {
  208 | //     await page.locator("input[aria-label='Product Search']").fill("219500")
  209 | //     const productSearchAddBtn = page.getByRole('button', { name: 'Add' })
  210 | //     await productSearchAddBtn.click()
  211 | //     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  212 | //     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  213 | //     await expect(productSelAddToBsktList).toBeVisible()
  214 | //     await expect(productSelAddToBsktList).toHaveScreenshot(["OrderCapture/AddToProductBasketSlotSection", "AddToProductBasketSlotSection.png"])
  215 | // })
  216 |
  217 | test("Validate Add product to basket layout and Validate Auto populate fields", async () => {
  218 |     // await page.locator("input[aria-label='Product Search']").fill("D53216")
  219 |     await page.locator("button[aria-label='Add']").waitFor({ state: 'visible', timeout: 9000 })
  220 |     const productSearchAddBtn = page.locator("button[aria-label='Add']")
  221 |     await productSearchAddBtn.click()
  222 |     await page.waitForSelector("[class*='oj-listview-item']", { state: 'visible', timeout: 15000 })
  223 |     await expect(page.locator("button[aria-label='Save']")).toBeVisible({timeout: 15000});
  224 |     const isCustomerAutoPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Customer'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  225 |     expect(isCustomerAutoPopulated).not.toBeNull();
  226 |     // const isBillToAutoPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Bill to'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  227 |     // expect(isBillToAutoPopulated).not.toBeNull();
  228 |     const isRequiredPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Required'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  229 |     expect(isRequiredPopulated).not.toBeNull();
  230 |     // const isShippingMethodPopulated = await page.locator("oj-sp-scoreboard-metric-card[card-title='Shipping Method'] div.oj-sp-scoreboard-metric-card-metric").textContent();
  231 |     // expect(isShippingMethodPopulated).not.toBeNull();
  232 |     const isClearAllVisible = await page.locator("button[aria-label='Clear All']")
  233 |     expect(isClearAllVisible).toBeVisible()
  234 |     const productSelAddToBsktList = page.locator("[class='oj-listview-cell-element']")
  235 |     await expect(productSelAddToBsktList).toBeVisible()
  236 |     const addToBsktDecreaseBtn = page.locator("div.oj-listview-cell-element button[aria-label='Decrease']")
  237 |     const addToBsktIncreaseBtn = page.locator("div.oj-listview-cell-element button[aria-label='Increase']")
  238 |     const addToBsktDeleteBtn = page.locator("button[aria-label='Delete']")
  239 |     const isSubTotalDisplayed =  page.getByText('Sub Total');
  240 |     const isVATDisplayed =  page.getByText('VAT');
  241 |     const isTotalDisplayed =  page.getByText('Total',{exact: true});
  242 |     await expect(isSubTotalDisplayed).toBeVisible();
  243 |     await expect(isVATDisplayed).toBeVisible();
  244 |     await expect(isTotalDisplayed).toBeVisible();
  245 |     await expect(addToBsktDecreaseBtn).toBeVisible();
  246 |     await expect(addToBsktIncreaseBtn).toBeVisible();
  247 |     await expect(addToBsktDeleteBtn).toBeVisible();
  248 | })
  249 |
  250 | test("Validate Detail Slot (Add Basket Section) in Order Capture Page", async () => {
  251 |     const detailSlotSection = page.locator("oj-vb-fragment-slot[name='detail']")
  252 |     await expect(detailSlotSection).toHaveScreenshot(["OrderCapture/DetailSlotSection", "DetailSlotSectionOnOrderCapturePage.png"])
  253 | })
  254 |
  255 |
  256 | test("Validate Order Dialog pop up with Print and Edit Options", async () => {
  257 |     const customerContentSlotSelection = page.locator("oj-sp-scoreboard-metric-card[card-title='Customer']");
  258 |     const customerSearchInputAvailable = page.locator("input[aria-label='Customer Search']");
  259 |     const selectCustomerListed = page.getByText('7000D54')
  260 |     const customerSearchResultsAvailable = page.locator('oj-c-list-view.customer-list');
  261 |     const clickOnChangeButton =  page.locator('#btnChangeCustomer');
  262 |     const clickOnClearAllBtn = page.locator("button[aria-label='Clear All']");
  263 |     
> 264 |     await clickOnClearAllBtn.click();
      |                              ^ Error: locator.click: Target page, context or browser has been closed
  265 | //    await customerContentSlotSelection.click();
  266 |     // await page.locator("div[title='Customer Details']").waitFor({timeout: 7000})
  267 |     // if(await clickOnChangeButton.isVisible({timeout: 6000})){
  268 |     //   await clickOnChangeButton.click(); }
  269 |     
  270 |     // await customerSearchInputAvailable.fill('7000D54')
  271 |     // await selectCustomerListed.waitFor({state:'visible', timeout: 6000});
  272 |     // await expect(customerSearchResultsAvailable).toBeVisible({timeout: 20000});
  273 |     // await selectCustomerListed.click();
  274 |     await page.locator("input[aria-label='Product Search']").fill("508201")
  275 |     await page.locator("button[aria-label='Add']").waitFor({ state: 'visible', timeout: 15000 })
  276 |     const productSearchAddBtn = page.locator("button[aria-label='Add']")
  277 |     await productSearchAddBtn.click()
  278 |     await page.waitForSelector("div[class='oj-listview-cell-element']", { state: 'visible', timeout: 16000 })
  279 |     const productSelAddToBsktList = page.locator("div[class='oj-listview-cell-element']")
  280 |     await expect(productSelAddToBsktList).toBeVisible({ timeout: 12000 });
  281 |     const clickOnSubmitBtn = page.locator("button[aria-label='Submit']")
  282 |     await expect(clickOnSubmitBtn).toBeEnabled({timeout: 25000})
  283 |     // await clickOnSubmitBtn.waitFor({state:'visible',timeout:20000});
  284 |     // await page.waitForFunction(async (clickOnSubmitBtn) => {
  285 |     //        return await clickOnSubmitBtn.isEnabled();
  286 |     // }, clickOnSubmitBtn)
  287 |     await clickOnSubmitBtn.click({ force: true });
  288 |     await page.getByRole('heading', { name: 'Checkout', exact: true }).waitFor({ state: 'visible' });
  289 |
  290 |     const waitForPickingNoteHeaderText = page.locator("//span[text()='Print picking note']");
  291 |     const waitForEditBsktItemChk = page.locator("//span[text()='Have you picked ALL stock items?']");
  292 |     await expect(waitForPickingNoteHeaderText).toBeVisible();
  293 |     await expect(waitForEditBsktItemChk).toBeVisible();
  294 |     const isPrintBtnAvailableOnOrderDialog = page.getByRole('button',{name:'Print'});
  295 |     await expect(isPrintBtnAvailableOnOrderDialog).toBeVisible();
  296 |     const isEditBtnAvailableOnOrderDialog = page.getByRole('button').filter({hasText:'Edit'});
  297 |     await expect(isEditBtnAvailableOnOrderDialog).toBeVisible();
  298 |     (await page.waitForSelector("//button[text()='Confirm']")).waitForElementState('enabled');
  299 |     await page.locator("//button[text()='Confirm']").click({timeout:5000});
  300 |     expect(await page.locator("#oj_gop1_h_pageTitle").textContent()).toMatchSnapshot(["OrderCapture/OrderConfirmation", "OrderConfirmationHeader.txt"]);
  301 | })
  302 |
  303 | // test.skip("Validate Extended button under Detail Slot section", async ({ page }) => {
  304 | //     const extendedBtnOnDetailSlot = page.getByRole('button', { name: 'Extended' })
  305 | //     await expect(extendedBtnOnDetailSlot).toHaveScreenshot(["OrderCapture/DetailSlotSection", "ExtendedBtnDetailSlotSectionOnOrderCapturePage.png"])
  306 | // })
  307 |
  308 |
```